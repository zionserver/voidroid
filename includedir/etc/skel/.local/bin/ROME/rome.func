##########################################################################
## @file			rome.func
## @brief			The heart of ROME - all global functions
## @author			steadfasterX <steadfasterX -AT- gmail -DOT- com>
## @date                        2018
## @copyright			LGPL v3
## @details                     ROME - [ROM] [E]xtractor
##
## global functions
##
## include this with:
## source rome.func
#
##########################################################################
# doxygen copy templates:
#
# # @var 
# # @brief 
# # @showinitializer
# # @details 
#
# # @fn F_NAME()
# # @brief ..
# # @param 1 ..
# # @return ..
# # @exception ..
# # @details ..
#
##########################################################################
VARS="${0%/*}/rome.vars"

source "$VARS"
[ $? -ne 0 ]&& echo "ERROR: including $VARS" && exit 3

######################################################################################

# do not echo but write log entry
F_LOG(){
    # takes 1 argument
    # 1 => Message to log/echo (can handle \t and \n)
  
    echo -e "$(date '+%F %T'): $1" >> $LOG
}; export -f F_LOG

# echo output and save it in a log as well
F_ELOG(){
  # takes 1 argument
  # 1 => Message to log/echo (can handle \t and \n)
  
  echo -e "$(date '+%F %T'): $1" | tee -a $LOG

}; export -f F_ELOG

######################################################################################

# print a message
F_MSG(){ F_LOG "$FUNCNAME: started"
    # takes 2 arguments
    #   
    #  1 => box width
    #  2 => message to show
    # optional:
    #  3 => free args
    $FYAD --width=$1 --title="$YTITLE" --text "$2" $3
    RET=$?
    F_LOG "$2"
    F_LOG "$FUNCNAME: ended"
    echo $RET
}; export -f F_MSG

# print an error message
F_MSGE(){ F_LOG "$FUNCNAME: started"
    # takes up to 3 arguments
    #
    # 1 => width
    # 2 => message
    #
    # optional:
    # 3 => yad stuff
    
    $FYAD --width="$1" --title="$YTITLE - ERROR" --image="$SICONS/error.png" --text "ERROR:\n\n$2" $3 --button=Exit:0
    RES=$?
    F_LOG "ERROR: $2"
    F_LOG $RES
    echo $RES
}; export -f F_MSGE

# print an OK message
F_MSGOK(){ F_LOG "$FUNCNAME: started"
    # takes up to 3 arguments
    #
    # 1 => width
    # 2 => message
    #
    # optional:
    # 3 => yad stuff

    $FYAD --width="$1" --title="$YTITLE - SUCCESS" --image="$SICONS/ok_64x64.png" --text "\n$2" $3 --button=Close:0
    RES=$?
    F_LOG "$2"
    F_LOG $RES
    echo $RES
}; export -f F_MSGOK

# print a warning message
F_MSGW(){ F_LOG "$FUNCNAME: started"
    # takes up to 3 arguments
    #
    # 1 => width
    # 2 => message
    #
    # optional:
    # 3 => yad stuff

    $FYAD --width="$1" --title="$YTITLE - WARNING" --image="$SICONS/warning_64x64.png" --text "\n$2" $3 --button=Close:0
    RES=$?
    F_LOG "$2"
    F_LOG $RES
    echo $RES
}; export -f F_MSGW

# check errorcode + exit when not errorcode not as expected
F_ERR(){ F_LOG "$FUNCNAME: started"
  # takes 2-4 arguments
  #
  # mandantory:
  #   1 => the process initiating this function
  #   2 => the errorcode (usually $? in your call)
  # optional (4 requires at least an empty 3):
  #   3 => the message to show
  #   4 => the expected error code (if missing we expect 0)
  #   5 => yad code for F_MSGE (requires at least emtpy 3 and 4)
  CALLER=$1
  ERRCODE=$2
  MSG="$3"
  EXPECTED=$4
  YADSTUFF="$5"

  [ -z "$EXPECTED" ] && EXPECTED=0
  
  if [ -z "$CALLER" ]||[ -z "$ERRCODE" ];then
    F_ELOG "Required argument missing in $FUNCNAME!"
    F_EXIT $FUNCNAME 3
  fi
  if [ "$ERRCODE" != "$EXPECTED" ];then
    F_ELOG "ERROR: $ERRCODE occurred in $CALLER (expected $EXPECTED, got $ERRCODE)"
    [ ! -z "$MSG" ] && F_MSGE 800 "$MSG" "$YADSTUFF"
    F_EXIT "${CALLER}->${FUNCNAME}" 4
  else
    echo "OK: $CALLER"
  fi
}; export -f F_ERR

# exit properly
F_EXIT(){ F_LOG "$FUNCNAME: started"
  # takes 3 arguments
  # mandantory:
  #   1 => the function or reason who calls the exit function
  #   2 => the exitcode to be used
  #
  # optional:
  #   3 => type: cleaning lock file (full) or just close (when not set)
  EREASON=$1
  ECODE=$2
  ETYPE=$3
  
  F_ELOG "EXIT: $EREASON with code $ECODE"
  
  [ "$ETYPE" == "full" ] && rm -vf $LOCKFILE >> $LOG

  exit $ECODE
  F_LOG "$FUNCNAME: ended"
}; export -f F_EXIT

###############################################################################################

# about/support screen
F_ABOUT(){ F_LOG "$FUNCNAME: started"
    # takes no args

    $FYAD --image="$SICONS/logo_128x128.png" --title="$YTITLE - ABOUT" --width=800 --height=500 --fixed --text \
"\n  $TNAME is based on:\n\t- <a href='https://sourceforge.net/projects/yad-dialog'>YAD</a> - without this no GUI\n\
\t- the awesome <a href='https://github.com/Lekensteyn/lglaf'>LGLAF</a> code by Peter Wu\n\
\t- <a href='https://github.com/ehem/kdztools'>kdztools</a> by Elliott Mitchell\n\
\t- <b>MANY</b> enhancements by steadfasterX (including this GUI)\n\n\
  ${TNAME} sources:\n\
\t- <a href='https://github.com/steadfasterX/salt'>$TNAME</a>\n\
\t- <a href='https://github.com/steadfasterX/lglaf'>Patched LGLAF</a>\n\
\t- <a href='https://github.com/steadfasterX/salt'>Patched kdztools</a>\n\n\
  $TNAME support: <a href='https://tinyurl.com/SALTatXDA'>XDA thread</a>\n\n\
  Special credits:\n\
\t- <a href='https://github.com/tuxuser/'>tuxuser</a> for making LAF communication on Nougat possible and for his great support!\n\n\
  Images/Icons:\n\
\t- SALT logo is created by <a href='https://github.com/steadfasterX'>steadfasterX</a> and licensed under <a href='https://creativecommons.org/licenses/by-sa/4.0/'>CC BY-SA 4.0</a>.\n\
\t- CR icon by RRZEicons <a href='https://creativecommons.org/licenses/by-sa/3.0'>CC BY-SA 3.0</a> from Wikimedia Commons. Modified in size." \
        --button=Close:0
}; export -f F_ABOUT

# Update everything!
F_UPDATE(){ F_LOG "$FUNCNAME: started"
    # takes no arguments
    #
    CNT=0
    for u in ${MYPATH},$MYGIT; do
        CNT=$((CNT+1))
        F_LOG "$FUNCNAME: updating ${u/,*} on branch ${u/*,} ..."
        echo "${CNT}:5"
        cd ${u/,*}
        echo "${CNT}:10"
        F_LOG "$FUNCNAME: git checkout:\n$($GIT checkout ${u/*,} 2>&1)"
        F_LOG "$FUNCNAME: git pull:\n"
        $GIT pull 2>&1 | tee -a $LOG | sed "s/^/${CNT}:#/g"
        test ${PIPESTATUS[0]} -eq 0 && echo "${CNT}:100"
    done | $FYAD --title="$YTITLE - UPDATING" --text="\n  <b>Be patient while freshen up your installation...</b>\n  (if a progress bar do NOT get to 100% a manual update is required)\n\n" --width 800 --multi-progress --bar="Main codebase":norm --button=Close
    F_MSGW 600 "You must restart ROME if you have updated before the changes become active.  " "--fixed"
    F_LOG "$FUNCNAME: ended"
}; export -f F_UPDATE

F_EXTRACTROM(){ F_LOG "$FUNCNAME: started"
    EXCHOICES=$($FYAD --title="$YTITLE - Choose ROM" --width=800 --always-print-result --text \
        "\n  Choose your ROM zip file\n" \
        --form \
        --field="  ROM zip file":FL --file-filter="ROM (*.zip)| *.zip *.ZIP" undef\
        --field="  Working directory":DIR "/tmp" \
        --field="  Auto-Mount resulting image file":CHK true \
        --field="  Mountpoint (don't touch unless you know why)" "/mnt/android_image" \
        --button=Abort:99 \
        --button=Next:0 \
        )
    [ $? -eq 99 ] && F_MSGW 500 "Aborted by user" && F_EXIT $FUNCNAME 42

    F_LOG "returned: $EXCHOICES"
    ZIPFILE=$(echo "$EXCHOICES" | cut -d '|' -f 1)
    TARGDIR=$(echo "$EXCHOICES" | cut -d '|' -f 2)
    MNTWANT=$(echo "$EXCHOICES" | cut -d '|' -f 3)
    CMNTPNT=$(echo "$EXCHOICES" | cut -d '|' -f 4)
    F_ELOG "ZIPFILE = $ZIPFILE, TARGDIR = $TARGDIR"

    [ ! -f "$ZIPFILE" ] && F_ERR "$FUNCNAME" 3 "$ZIPFILE does not exists or is not readable!"
    [ ! -z "$TARGDIR" ] && [ ! -d "$TARGDIR" ] && echo mkdir -p $TARGDIR

    RTYPE=undef
    unzip -Z1 "$ZIPFILE" 'payload.bin' 2>&1 >> $LOG
    [ $? -eq 0 ] && RTYPE=payload

    unzip -Z1 "$ZIPFILE" '*.new*' 2>&1 >> $LOG
    [ $? -eq 0 ] && RTYPE=sparse
    
    case $RTYPE in
        payload) F_EXTRACTPL "$ZIPFILE" ;;
        sparse) F_EXTRACTDAT "$ZIPFILE" ;;
        *) F_MSGE 500 "Problem occured while pre-checking the ROM zip ($RTYPE).\nIs this really a ROM zip?"; F_EXIT ;;
    esac
}; export -f F_EXTRACTROM

# extract a payload binary
F_EXTRACTPL(){ F_LOG "$FUNCNAME: started with $@"
    ZIPFILE="$1"
    EXCHOICES2=$(for i in $(unzip -Z1 "$ZIPFILE" 'payload.bin' );do echo -e "false\n${i}" ;done | $FYAD --title="$YTITLE - Choose payload file" --width=800 --always-print-result --text \
        "\n  The following payload file(s) has/have been found in your zip file\n  Choose the one you wanna extract\n" \
        --list --radio-list \
        --column="Selection":RD \
        --column="Filename" \
        --print-column=2 \
        --button=Abort:99 \
        --button=Next:0
        )
    [ $? -eq 99 ] && F_MSGW 500 "Aborted by user" && F_EXIT $FUNCNAME 42
    F_LOG "returned: $EXCHOICES2"

    EXFILE=$(echo "$EXCHOICES2" | cut -d '|' -f 1)
    [ -z "$EXFILE" ] && F_MSGE 500 "No file choosen?!"
    
    CHIMGNAME="${EXFILE/\.*}"
    MNTPNT="${CMNTPNT}_$CHIMGNAME"

    F_LOG "ZIPFILE = $ZIPFILE, TARGDIR = $TARGDIR, EXFILE = $EXFILE, CHIMGNAME = $CHIMGNAME, MNTPNT = $MNTPNT"

    F_UNZIP "$ZIPFILE" "$TARGDIR" "$EXFILE"
    
    $PYTHONBIN $DUMPER $TARGDIR/$EXFILE $TARGDIR 2>&1 | tee -a $LOG | $FYAD --title="$YTITLE - PAYLOAD EXTRACT" --text="\n  Extracting:\n  <b>$EXFILE</b>\n  Please be patient depending on your PC this can take a while...\n" --width=800 --progress --progress-text="extracting ${ZIPFILE} ..." --pulsate --no-buttons --auto-close --enable-log --log-expanded --log-height 200
    F_MSGOK 600 "Payload has been extracted!\nYou can find all extracted images here:\n\n<b>${TARGDIR}/</b>"
 
    #if [ "$MNTWANT" == "TRUE" ];then
    #    F_MOUNTIMG "$TARGDIR/${CHIMGNAME}.converted.img" "$MNTPNT"
    #else
    #    F_MSGOK 600 "Image has been extracted!\nYou can find it here:\n\n<b>${TARGDIR}/</b>"
    #fi

}; export -f F_EXTRACTPL

# sparse Android data image (.dat) and it's transfer list 
F_EXTRACTDAT(){ F_LOG "$FUNCNAME: started with $@"
    # takes only 1 arg

    ZIPFILE="$1"

    EXCHOICES2=$(for i in $(unzip -Z1 "$ZIPFILE" '*.new*' );do echo -e "false\n${i}" ;done | $FYAD --title="$YTITLE - Choose DAT" --width=800 --always-print-result --text \
        "\n  The following dat file(s) has/have been found in your zip file\n  Choose the system dat file you wanna extract and convert\n" \
        --list --radio-list \
        --column="Selection":RD \
        --column="Filename" \
        --print-column=2 \
        --button=Abort:99 \
        --button=Next:0
        )
    [ $? -eq 99 ] && F_MSGW 500 "Aborted by user" && F_EXIT $FUNCNAME 42
    F_LOG "returned: $EXCHOICES2"

    EXFILE=$(echo "$EXCHOICES2" | cut -d '|' -f 1)
    BRC=$(echo "$EXFILE" |grep -c "\.br")
    if [ "$BRC" -eq 1 ];then
        if [ ! -f "$BROTLI" ];then
            F_MSGE 500 "You're trying to extract an Oreo 8.1 or later dat file\nwhich requires the Google tool <a href='https://github.com/google/brotli'>brotli v1.x or later!!!</a>\n\nPlease install it first:\n\n\t- in FWUL/Arch/Manjaro:\n\t  sudo pacman -S brotli\n\n\t- on Ubuntu/Debian/Mint:\n\t  sudo apt-get install brotli" "--selectable-labels --height=400 --fixed"
            F_EXIT $FUNCNAME 3
        else
            F_LOG "Brotli required and found!"
        fi
    fi

    [ -z "$EXFILE" ] && F_MSGE 500 "No file choosen?!"

    CHIMGNAME="${EXFILE/\.*}"
    MNTPNT="${CMNTPNT}_$CHIMGNAME"

    F_LOG "ZIPFILE = $ZIPFILE, TARGDIR = $TARGDIR, EXFILE = $EXFILE, CHIMGNAME = $CHIMGNAME, MNTPNT = $MNTPNT"

    F_UNZIP "$ZIPFILE" "$TARGDIR" "$EXFILE ${CHIMGNAME}.transfer.list"
    if [ $BRC -eq 0 ];then
         F_CONVDAT "DAT" "${TARGDIR}/${CHIMGNAME}.transfer.list" "${TARGDIR}/$EXFILE" "$TARGDIR" "${CHIMGNAME}.converted.img"
    else
        F_CONVDAT "BR" "${TARGDIR}/${CHIMGNAME}.transfer.list" "${TARGDIR}/$EXFILE" "$TARGDIR" "${CHIMGNAME}.converted.img"
        F_CONVDAT "DAT" "${TARGDIR}/${CHIMGNAME}.transfer.list" "${TARGDIR}/${CHIMGNAME}.new.dat" "$TARGDIR" "${CHIMGNAME}.converted.img"
    fi
    if [ "$MNTWANT" == "TRUE" ];then
        F_MOUNTIMG "$TARGDIR/${CHIMGNAME}.converted.img" "$MNTPNT"
    else
        F_MSGOK 600 "Image has been extracted!\nYou can find it here:\n\n<b>${TARGDIR}/</b>"
    fi

    F_LOG "$FUNCNAME ended"
}; export -f F_EXTRACTDAT

# mounting a given image file
F_MOUNTIMG(){ F_LOG "$FUNCNAME: started with $@"
    # takes 2 args
    #
    # required:
    # 1 => filename to mount (full path)
    # 2 => mountpoint
    MFILE="$1"
    MPNT="$2"

    [ ! -f "$MFILE" ] && F_ERR "$FUNCNAME" 3 "$MFILE does not exists or is not readable!"
    [ ! -d "$MPNT" ] && F_LOG "$FUNCNAME: mountpoint $MPNT does not exits.. will be created now!" && mkdir -p $MPNT

    # check if the mnt point is in use
    mount | grep "$MPNT" >> /dev/null
    if [ $? -eq 0 ];then
        UMANS=$(F_MSGW 500 "Mountpoint $MPNT is in use!\nDo you want to unmount it now?" "--button=Unmount:99")
        if [ $UMANS -eq 99 ];then
            F_UMNT $MPNT
        else
            F_EXIT
        fi
    fi
    # mount
    df --output=fstype "$MFILE" 2>&1 | grep vboxsf >> $LOG
    if [ $? -eq 0 ];then
            F_MSGE 500 "VirtualBox shared folders are not supported!\n.. and no this is <b>not</b> ROME's fault!\n\nWorkaround: copy the image file to your Desktop\n\nCheck logfile for any further details."
    else
            $PWREXEC mount -v -o loop "$MFILE" $MPNT 2>&1 >> $LOG 
            if [ $? -eq 0 ]; then
                $FYAD --width=1000 --image="$SICONS/logo_128x128.png" --title="$YTITLE - MOUNT" --text="  Image file:\n\t<b>$MFILE</b>\n\n  has been mounted to\n\t<b>$MNTPNT</b>\n\n" \
                    --form \
                    --field="Browse Image":FBTN "xdg-open $MPNT" \
                    --field="Unmount Image":FBTN "bash -c 'F_UMNT $MPNT'" \
                    --button=Close:0
            else
                F_MSGE 500 "Image could not be mounted to $MNTPNT.Is this even an mountable image?\n\nCheck logfile for any further details."
            fi
    fi
    F_LOG "$FUNCNAME ended"
};export -f F_MOUNTIMG

# unmount image/partitions, ..
F_UMNT(){ F_LOG "$FUNCNAME: started with '$@'"
    # takes 1 arg
    #
    # required:
    # 1 => mountpoint to unmount
    
    MPNT="$1"
    mount | grep "$MPNT" >> /dev/null
    if [ $? -eq 0 ];then
        $PWREXEC umount -v "$MPNT" 2>&1 >> $LOG
        if [ $? -eq 0 ];then F_MSGOK 500 "$MPNT unmounted!"; else F_MSGE 500 "Error on unmounting!\nCheck logfile in the advanced menu!";fi
    else
        F_MSGE 500 "Sorry but there is no mountpoint:\n\n$MPNT"
    fi
}; export -f F_UMNT

# unzip files from a ZIP :P
F_UNZIP(){ F_LOG "$FUNCNAME: started with '$@'"
    # takes 3 args
    #
    # required:
    # 1 => ZIP filename
    # 2 => target directory
    #
    # optional:
    # 3 => file(s) to extract

    ZIPF="$1"
    TARGD="$2"
    ZFILE="$3"
    [ ! -f "$ZIPF" ] && F_ERR "$FUNCNAME" 3 "$ZIPF does not exists or is not readable!"
    if [ -z "$TARGD" ];then
        F_ERR "$FUNCNAME" 3 "Missing target dir!"
    else
        [ ! -d "$TARGDIR" ]&& echo mkdir -p "$TARGDIR"
    fi

    F_LOG "Will unzip $ZFILE from $ZIPF to $TARGD (overwriting mode!)"

    unzip -o "$ZIPF" -d "$TARGD" $ZFILE 2>&1 | tee -a $LOG | $FYAD --title="$YTITLE - UNZIP" --text="\n  Unpacking:\n  <b>${ZIPF/*\/}</b>\n  Please be patient depending on your PC this can take a while...\n" --width=800 --progress --progress-text="extracting ${ZFILE} ..." --pulsate  --no-buttons --auto-close
    [ $? -ne 0 ] && F_MSGE 500 "Error $? occured / Aborted by user while unpacking $ZFILE" && F_EXIT $FUNCNAME 3
    F_LOG "Extracting finished successfully"

}; export -f F_UNZIP

# convert an android sparse file
F_CONVDAT(){ F_LOG "$FUNCNAME: started with $@"
    # takes 4 args
    #
    # required:
    # 1 => BR (brotli) or DAT (sda2img) mode
    # 2 => transfer list (full path)
    # 3 => sparse filename (full path)
    # 4 => target directory
    # 5 => target image file name

    CMODE="$1"
    TFLIST="$2"
    SFIL="$3"
    TDIR="$4"
    IMGTYPE="${5/\.*}"
    RFILE="${TDIR}/$5"

    F_LOG "$FUNCNAME: $CMODE, $TFLIST, $SFIL, $TDIR, $RFILE, $IMGTYPE"
    [ ! -f "$TFLIST" -o ! -f "$SFIL" -o ! -d "$TDIR" ] && F_MSGE 500 "missing file! $TFLIST, $SFIL, $TDIR," && F_EXIT $FUNCNAME 3

    case "$CMODE" in
        DAT) F_LOG "DAT mode detected"
             $PYTHONBIN $SDATBIN "$TFLIST" "$SFIL" "$RFILE" 2>&1 | tee -a $LOG | $FYAD --title="$YTITLE - CONVERT" --text="\n  Converting:\n  <b>${SFIL/*\/}</b>\n  Please be patient depending on your PC this can take a while...\n" --width=800 --progress --progress-text="converting ${SFIL} ..." --pulsate --no-buttons --auto-close
        ;;
        BR) F_LOG "BR mode detected"
            $BROTLI --force --decompress -o "${TDIR}/${IMGTYPE}.new.dat" "$SFIL" 2>&1 | tee -a $LOG | $FYAD --title="$YTITLE - CONVERT" --text="\n  Converting:\n  <b>${SFIL/*\/}</b>\n  Please be patient depending on your PC this can take a while...\n" --width=800 --progress --progress-text="converting ${SFIL} ..." --pulsate --no-buttons --auto-close 
        ;;
        *) F_MSGE 500 "no valid mode selected! ABORTED"; F_EXIT $FUNCNAME 3
        ;;
    esac
    [ $? -ne 0 ] && F_MSGE 500 "Error $? occured / Aborted by user while converting $SFIL" && F_EXIT $FUNCNAME 3
    F_LOG "Converting finished successfully"
}; export -f F_CONVDAT

# new version check
F_VCHK(){ F_LOG "$FUNCNAME: started with this args: $@"
    # Takes no argument
    #
    ONLVF=$($CURLB --connect-timeout 10 --stderr $LOG -s $VCHK | grep "VDIG=" | cut -d "=" -f 2 | tr -d '"')
    ONLV=$(echo "$ONLVF" | tr -d "." | cut -d "-" -f1)
    CURVF=$(echo "$VDIG" | cut -d "=" -f 2 | tr -d '"')
    CURV=$(echo "$CURVF" | tr -d "." | cut -d "-" -f1)

    if [ -z "$ONLV" ]||[ -z "$CURV" ];then
      F_LOG "$FUNCNAME: cannot check for new version:\nonline: $ONLV / $ONLVF\nhere: $CURV / $CURVF"
    else
      if [ $ONLV -gt $CURV ];then
        F_LOG "$FUNCNAME: newer version found ($ONLV / $ONLVF vs. $CURV / $CURVF)"
        UA=$(F_MSGW 700 "New ROME version available!\n\nYou:\t<b>$CURVF</b>\nOnline:\t<b>$ONLVF</b>\n\nIT IS HIGHLY RECOMMENDED TO UPGRADE!\nDo you want to update now?" "--button=Update:99")
        if [ "$UA" == 99 ];then
            (F_UPDATE)
            F_MSGOK 600 "Will close ROME now due to the update taken!\nJust re-open ROME afterwards."
            F_EXIT "After-Update-End" 0 full 
        fi
      else
        F_LOG "$FUNCNAME: no newer version found ($ONLV / $ONLVF vs. $CURV / $CURVF)"
      fi
    fi
}; export -f F_VCHK

## @fn F_CHKFREE()
## @brief check free disk space for a given folder
## @param 1 the folder / mountpoint to check
## @return free amount of disk space in MB
## @exception when param1 does not exists or can not be opened
F_CHKFREE(){ F_LOG "$FUNCNAME: started with this args: $@"
    CKDIR="$1"
    
    if [ -d "$CKDIR" ];then
        F_LOG "$FUNCNAME: valid dir specificed"
        $DFBIN -m "$CKDIR" | $AWKBIN '{print $4}' | $EGREPBIN "[[:digit:]]"
    else
        F_LOG "$FUNCNAME: The specified directory $CKDIR does not exists"
        echo 0
    fi
    F_LOG "$FUNCNAME: ended."
}; export -f F_CHKFREE

# mount a partition menu
F_MOUNTPARTS(){ F_LOG "$FUNCNAME: started"
    # takes 1 arg
    #
    # optional:
    # 1 => full path to image file

    ISRC=undef
    [ ! -z "$1" ] && ISRC="$1/click-here-2-select-a-file"

    CHOICE=$($FYAD --title="$YTITLE - MOUNT" --width=800 --always-print-result --text \
        "\n  Choose your image file you want to mount\n" \
        --form \
        --field="  Image file":FL --file-filter="Image (*.img)| *.img *.IMG *.bin *.mbn *.image" "$ISRC"\
        --field="  Mountpoint (don't touch unless you know why)" "/mnt/salt_mnt" \
        --button=Abort:99 \
        --button=Next:0 \
        )
    [ $? -eq 99 ] && F_MSGW 500 "Aborted by user" && F_EXIT $FUNCNAME 42

    F_LOG "returned: $CHOICE"
    IMGFILE=$(echo "$CHOICE" | cut -d '|' -f 1)
    MNTPNT=$(echo "$CHOICE" | cut -d '|' -f 2)

    F_LOG "IMGFILE = $IMGFILE, MNTPNT = $MNTPNT"

    [ ! -f "$IMGFILE" ] && F_ERR "$FUNCNAME" 3 "$IMGFILE does not exists or is not readable!"

    F_MOUNTIMG "$IMGFILE" "$MNTPNT"

}; export -f F_MOUNTPARTS
